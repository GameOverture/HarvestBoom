#!C:\soft\strawberry\perl\bin\perl

# Quit unless we have the correct number of command-line args
$num_args = $#ARGV + 1;
if ($num_args != 2) 
{
	print "\nUsage: BuildAudioLinks.pl linkPath.links srcCodePath.h\n";
	sleep 3;
	exit;
}

#Links
my @SndBanks;
my @WavDepends;

# Set cmd line arguments
my $sLinkPath   =$ARGV[0];
my $sSrcCodePath=$ARGV[1];

# Open file and read file into an array
open(FILE, $sLinkPath) or die("Unable to open audio link paths");
@data = <FILE>;
chomp(@data);

# Parse link file and create links
my $arraySize = @data;
my $i = 0;

while($data[$i] !~ m/Sound Banks \(+\d+\)/) 
{
	$i++; 
}
my $iNumSoundBanks;
if($data[$i] =~ m/Sound Banks \((\d+)\)/)
{
	$iNumSoundBanks = $1;
	print "-==-==-==-==-==-==-==-==-==-==-==-==-==-==-\n";
	print "Sound Banks Found: ".$iNumSoundBanks."\n\n";
}

my $iIndex = 0;
for (; $iNumSoundBanks >= 1; $iNumSoundBanks--) 
{	
	while($data[$i] !~ m/Sound Bank = /) { $i++; }
	my $sSndBankName;
	if($data[$i] =~ m/Sound Bank = (.*)/)
	{
		$sSndBankName = $1;
		push(@SndBanks, "\"".lc($sSndBankName)."\"");
		#print "Sound Bank Name: ".$sSndBankName."\n";
	}

	my $bAbort = 0;
	while(1) 
	{
		if($data[$i] =~ m/Dependant Wave Banks = /)
		{
			last;
		}	
		elsif($data[$i] =~ m/<none>/)
		{
			$bAbort = 1;
			last;
		}
			
		$i++; 
	}
	
	if($bAbort eq 1)
	{
		pop(@SndBanks);
		next;
	}
	
	my $sDependancies;
	if($data[$i] =~ m/Dependant Wave Banks = (.*)/)
	{
		$sDependancies = $1;
		#print "Dependancies: ".$sDependancies."\n";
	}
	my @aDependencies = split(", ", $sDependancies);	
	
	my $tmpCount = 0;
	foreach (@aDependencies) 
	{
		$aDependencies[$tmpCount] = "\"".lc($aDependencies[$tmpCount])."\"";
		$tmpCount++;
		# push(@{$Links{$sSndBankName}}, $dep);
	}
	@WavDepends[$iIndex] = \@aDependencies;
	$iIndex++;
}

print "CONFIGURED SOUND BANKS:\n";
foreach (@SndBanks) 
{
	print $_.", ";
}
print "\n-==-==-==-==-==-==-==-==-==-==-==-==-==-==-\n";
# print "\nWavDepends:\n";
# foreach $ref (@WavDepends) 
# {
	# foreach (@$ref)
	# {
		# print $_.", ";
	# }
	# print "\n";
# }

# close file 
close(FILE);

# Write source file
open (SRCFILE, '>', $sSrcCodePath);

# Write file header
print SRCFILE "/***************************************************************************************"."\n";
print SRCFILE " * LtGAudioLinks.h"."\n";
print SRCFILE " *"."\n";
print SRCFILE " * Copyright (c) 2010 Lightning Gaming, Inc."."\n";
print SRCFILE " * All Rights Reserved."."\n";
print SRCFILE " *"."\n";
print SRCFILE " * Permission to use, copy, modify, and distribute this software "."\n";
print SRCFILE " * is hereby NOT granted. Please refer to the file \"copyright.html\""."\n";
print SRCFILE " * for further important copyright and licensing information."."\n";
print SRCFILE " *"."\n";
print SRCFILE " * IMPORTANT: This file is auto generated by BuildAudioLinks.pl"."\n";
print SRCFILE " *            Any manual changes will likely be overwritten."."\n";
print SRCFILE " ***************************************************************************************/"."\n";
print SRCFILE "#pragma once"."\n\n";

print SRCFILE "const char* const szSOUNDBANKS[] = \n{\n";
foreach $snd (@SndBanks) {
	print SRCFILE "    $snd,\n";
}
print SRCFILE "    NULL\n";
print SRCFILE "};\n";

my $numSndBanks = (@SndBanks);
my $maxNumDepend = 0;
foreach $ref (@WavDepends) 
{
	if($maxNumDepend < scalar(@$ref)){
		$maxNumDepend = scalar(@$ref);
	}
}
$maxNumDepend++; # Add one for end NULL

# Pad 'empty' dependencies with NULL
foreach $ref (@WavDepends) 
{
	my $diff = $maxNumDepend - scalar(@$ref);
	for (; $diff >= 1; $diff--) {
		push (@$ref, "NULL");
	}
}

print SRCFILE "const char *const szWAVEDEPENDENCIES[$numSndBanks][$maxNumDepend] =\n";
print SRCFILE "{\n";

foreach $ref (@WavDepends) 
{
	print SRCFILE "    { ";
	foreach (@$ref)
	{
		print SRCFILE $_.", ";
	}
	print SRCFILE " },\n";
}


print SRCFILE "};"."\n";

close (SRCFILE); 