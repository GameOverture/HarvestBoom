/***************************************************************************************
 * LtGAudioManager.h
 *
 * Copyright (c) 2010 Lightning Gaming, Inc.
 * All Rights Reserved.
 *
 * Permission to use, copy, modify, and distribute this software 
 * is hereby NOT granted. Please refer to the file "copyright.html"
 * for further important copyright and licensing information.
 *
 * PURPOSE:
 * TBD
 ***************************************************************************************/
#pragma once

//#include "LtGafx.h"
#include "LtGAudioBanks.h"
#include "Harmony/HyEngine.h"
#include "Harmony/Scene/Nodes/IHyNode.h"
//#include "../LgSlotAfx.h"

// Below are auto generated files:
//      "LtGAudioCues.h" is auto-generated by XACT designer tool. It supplies all the queue indices from the associated project
//      "LtGAudioLinks.h" is auto-generated by BuildAudioLinks.pl custom build step. It describes all the dependencies between sound banks and wave banks.
//#include "LtGAudioCues.h"
//#include "LtGAudioLinks.h"

using std::vector;
using std::string;

#define THEMES_DIR "themes\\"
#define AUDIO_DIR "\\Sounds\\"

class LtGAudioManager : public HyEntity2d
{
	friend class LgSlotGame;

	static LtGAudioManager *	m_Instance;

	IXACT3Engine *				m_pXACTEngine;

	vector<LtGAudioWavBank *>	m_WaveBanks;
	vector<LtGAudioSndBank *>	m_SoundBanks;
	
	CRITICAL_SECTION			m_CritSection;
	bool						m_bHandleStreamingWaveBankPrepared;
	IXACT3WaveBank *			m_pStreamingWaveBank;

	string						m_strGameDir;

	double						m_dUpdateThrottle;

	std::vector<std::string>				m_SoundBankList;
	std::vector<std::vector<std::string> >	m_WaveDependenciesList;
	
	int										m_iNumLinks;

	float						m_fMusicRef;
	HyTweenFloat				m_fMusicVolume;
	
	LtGAudioManager();
	~LtGAudioManager(void);

	//-----------------------------------------------------------------------------------------
	// Takes a const char * that represents an audio file and converts it to the absolute path
	// on the file system. 'szExpectedExt' is what extension the audio should have (ex ".xsb"), which will be 
	// appended to 'szFullAudioFilePath' if not included in 'szAudioFileName'.
	//-----------------------------------------------------------------------------------------
	void ConvertAudioFileNameToPath(char *szFullAudioFilePath, const char* szAudioFileName, const char *szExpectedExt, int iFilePathLength);

	//-----------------------------------------------------------------------------------------
	// When the XACT project is built, it generates a report file which apart of a custom build
	// process, creates the src file LtGAudioLinks.h. This header describes the dependencies
	// between sound banks and their required wav banks. Invoking this function will load any
	// wav banks not currently in memory, or increment their reference count if they already are.
	//
	// The integer returned is the index into LtGAudioLink szSOUNDBANKS's array for future lookup
	//-----------------------------------------------------------------------------------------
	int LoadSndBankDependencies(const char *szSndBankName);

	//--------------------------------------------------------------------------------------
	// Create an "in memory" XACT wave bank file using memory mapped file IO
	// Memory mapped files tend to be the fastest for most situations assuming you 
	// have enough virtual address space for a full map of the file
	//--------------------------------------------------------------------------------------
	HRESULT LoadWavBank(const char *szWaveBank, bool bStreaming = false);

	//-----------------------------------------------------------------------------------------
	// This is essentially the opposite of LoadSndBankDependencies(). It figures out the 
	// wav bank dependencies and decrements their reference count. If their reference count
	// becomes zero because of this it will invoke the Destroy() function of the wav bank interface
	//-----------------------------------------------------------------------------------------
	void UnRefWavBankDependencies(const LtGAudioSndBank *pSoundBank);

	//-----------------------------------------------------------------------------------------
	// Iterates through the manager's wav vector and checks if any references is zero or less,
	// invoking Destroy on the interface if so.
	//-----------------------------------------------------------------------------------------
	void GarbageCollectWavBanks();

	//-----------------------------------------------------------------------------------------
	// Retrieves the LtGAudioWavBank pointer from the manager's vector based upon its name.
	//-----------------------------------------------------------------------------------------
	LtGAudioWavBank *LtGAudioManager::GetWaveBank(const char *szWaveBankName);

	//-----------------------------------------------------------------------------------------
	// This is the callback for handling XACT notifications.  This callback can be executed on a 
	// different thread than the app thread so shared data must be thread safe.  The game 
	// also needs to minimize the amount of time spent in this callbacks to avoid glitching, 
	// and a limited subset of XACT API can be called from inside the callback so 
	// it is sometimes necessary to handle the notification outside of this callback.
	//-----------------------------------------------------------------------------------------
	static void WINAPI XACTNotificationCallback(const XACT_NOTIFICATION* pNotification);

	//-----------------------------------------------------------------------------------------
	// Calls XACT engine's DoWork() function at a throttled rate.
	//-----------------------------------------------------------------------------------------
	void Update2(/*double dTimeDelta*/);

	virtual void OnUpdate() override;

public:

	void Init(HarmonyInit &initStruct);

	bool LinkSoundandWaveInformation(const char *** pWaveDepend, char ** pSoundBank);

	static LtGAudioManager *GetInstance();
	static void Delete();

	IXACT3Engine *GetXACT() { return m_pXACTEngine; }

	void StopAllSfxInCategory(const char *szCategoryName);
	void PauseAllSfxInCategory(const char *szCategoryName, bool bPause);

	void SetVolumeInCategory(const char *szCategoryName, float fVolume);
	void FadeMusicOut(float fDuration);
	void RestoreMusicVol();
	//float GetVolumeInCategory(const char *szCategoryName);

	//--------------------------------------------------------------------------------------
	// Read and register the sound bank file with XACT.  Do not use memory mapped file IO because the 
	// memory needs to be read/write and the working set of sound banks are small.
	//--------------------------------------------------------------------------------------
	LtGAudioSndBank *Load(const char *szSoundBank);

	//--------------------------------------------------------------------------------------
	// This function invokes the Destroy() method of the IXACT3SoundBank interface and decrements 
	// any WavBanks references associated with it. 
	// This should stops all cues residing in this sound bank that are currently playing, but 
	// it does not free the associated memory right away. The memory will be freed once the XACT 
	// callback fires the XACTNOTIFICATIONTYPE_SOUNDBANKDESTROYED event.
	//--------------------------------------------------------------------------------------
	void UnLoad(LtGAudioSndBank **ppSndBank);
};
